{
    "tab-0": "Lessons",
    "tab-1": "Demo",
    "tab-2": "Downloads",
    "lesson_page": {
        "p-0": "When we have to travel long distances, we want to get from one place to another as quickly as possible. This challenge of precise route planning was and is faced by people long ago as well as today. But can quantum physics take this work off our hands?",
        "p-1": "This course is a comprehensive guide to the quantum mechanical approach to this age-old optimization problem. You will learn:",
        "p-2": "If you're looking for further information, check out",
        "li-0": "What graphs are and how to perform calculations on them",
        "li-1": "How QUBO problems are constructed",
        "li-2": "How the Traveling Salesman Problem can be represented as a Hamiltonian for quantum annealers",
        "li-3": "What the advantages and drawbacks of this method are",
        "li-4": "How to perform pathfinding on your own graphs",
        "Link": "the project's GitHub repo",
        "strong": "Have fun learning!",
        "h2-0": "Chapter 1",
        "h2-1": "Chapter 2",
        "h2-2": "Chapter 3",
        "h2-3": "Chapter 4",
        "h2-4": "Chapter 5"
    },
    "lesson-xxxxx": {
        "h2-0": "Where are the constraints?",
        "p-0": "Although the unbeatable speed of this quantum approach makes it very attractive, it also has some major limitations. Some of them are posed simply by the state of today's technology and are likely to be overcome by future advancements in the field of quantum computing. Since a graph of <i>n</i> nodes is first converted to a Tour Matrix of <i>n<sup>2</sup></i> elements and then to a Hamiltonian of <i>(n<sup>2</sup>)<sup>2</sup></i> elements, the number of qubits and connections needed rises quartically, i.e. by an exponent of four. Analogous to traditional computing, you could characterize the <i>complexity</i> of the quantum algorithm as:",
        "p-1": "As the number of interconnected qubits rises, the number of physical qubits that need to be combined to logical qubits increases, causing the probability of false results to grow exponentially. This is why <span class=\"emphasis\">n = 8</span> is approximately the limit of what the current D-Wave Advantage system can solve, as each qubit is connected to 15 others only. With each city added, the embedding also becomes larger, until eventually all the space on the QPU is used up. The figure on the right shows the space the embedding of the problem size <span class=\"emphasis\">n = 8</span> takes up on the QPU, working with chains that span 8-9 qubits in length. However, due to increasing computing capacity and more complex architectures, this limitation will likely become increasingly irrelevant in the future.",
        "p-2": "The <i>matrix density</i>, meaning the proportion of matrix elements that are not zeros, also plays a role in computing efficiency. The sparser the Hamiltonian, i.e. the fewer chains are needed relative to the problem size, the easier it is for the quantum computer to solve the QUBO problem. Since the matrices produced by this quantum TSP algorithm are relatively dense, the performance limit is reached with smaller problem sizes than usual. This constraint is far more relevant since it is not yet foreseeable whether the accuracy problems of quantum annealers will be solved by scaling alone.",
        "p-3": "When submitting problems to the QPU, the embedding is generated automatically by D-Wave Ocean to save time, especially in the case of larger problems. However, this is a complex optimization task as well which is why algorithms are likely to not find the best solution. If we wanted to maximize the efficiency, it therefore would be theoretically possible to manually embed the QUBO problem and to set each qubit and connection by hand. If you are interested in the technical side, you can read about it in detail in the",
        "p-4": "This task however requires not only a large amount of further mathematical calculations, but also an intricate and founded knowledge of the QPU topology. The process is time-consuming and has to be repeated for each individual problem size, making it only worthwhile for some small problems.",
        "h3-0": "A solution approach: Controlling the embedding",
        "Link-0": "official documentation"
    },
    "lesson-xxxxy": {
        "h2-0": "Possible improvements and optimizations",
        "p-0": "The presentation and evaluation of the method is completed; however, it should be considered more as a basis for further algorithmic approaches of this kind and can be further optimized and extended with a few adjustments.",
        "p-1": "Since TSP solutions are closed loops that visit every city, the starting point can be set arbitrarily. So in theory, if we take this decision away from the quantum annealer and set the starting point to, say, <span class=\"emphasis\">A</span>, the first row and column of the Tour matrix can be omitted, since this city is guaranteed not to be visited in the rest of the path:",
        "p-2": "In addition, the cost function needs to be adjusted so the path from <span class=\"emphasis\">A</span> to <span class=\"emphasis\">B</span>, <span class=\"emphasis\">A</span> to <span class=\"emphasis\">C</span> etc. is only dependent on the second node visited. This approach reduces the size of the Tour Matrix by 1, meaning the number of cities the annealer can find a solution for can be increased by 1 beyond its normal computing capability. However, these and other optimizations are only worthwhile in the long term if they can actually reduce the number of non-zero entries in the Hamiltonian.",
        "p-3": "To make the algorithm more applicable for real-life situations, it would also be possible to extend it beyond the scope of the traditional Traveling Salesman Problem for <i>incomplete graphs</i> (where not all nodes are interconnected) and <i>directed graphs</i> (where certain edges can only be traversed in one direction or have different costs depending on the traversing direction):",
        "p-4": "If a connection between a pair of cities doesn't exists (for example because of a road network layout), the quantum annealer has to be discouraged at all costs from incorporating it in the solution. To represent a non-existent edge, you therefore could assign a massive punishment to it so that the lowest cost is never reached if it's part of the tour. In mathematical literature, this is commonly expressed with an \"&#8734;\" (infinity) symbol, but in our case, a high integer number is more applicable.",
        "p-5": "To represent different costs at different traversing directions in a directed graph, you only have to differentiate between the order the nodes can be visited when formulating the QUBO equation. In the example below, the cost function has different values depending on whether the path leads from A to C or from C to A:",
        "p-6": "The previous method can be applied to the case when a connection exists only in one direction: The other direction is assigned a high cost. It should be noted, however, that in the case of incomplete and directed graphs, the quantum annealer can only output a valid solution if a Hamiltonian cycle actually exists.",
        "i-0": "Examples of an incomplete graph (left) and a directed graph (right)"
    },
    "button-0": "Start",
    "button-1": "Download",
    "footer": "Created with"
}